// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

model Vehicle {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(160)
  description String
  imageUrl    String
  videoUrl    String?
  createdAt   DateTime @default(now())
}

model Admin {
  id                 String   @id @default(uuid())
  username           String   @unique
  passwordHash       String
  securityQuestion   String
  securityAnswerHash String
  createdAt          DateTime @default(now())
}

model ApplyLinks {
  id         Int      @id @default(1)
  mechanical String?
  avionic    String?
  software   String?
  updatedAt  DateTime @updatedAt
}

model SocialLink {
  id        Int      @id @default(autoincrement())
  label     String   @unique     // Instagram / YouTube / LinkedIn
  url       String   @default("")
  order     Int      @default(0)
  updatedAt DateTime @updatedAt
}

model Sponsor {
  id        String   @id @default(uuid())
  imageUrl  String
  title     String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model TeamMember {
  id          String   @id @default(uuid())
  name        String
  role        String?
  squad       Squad?
  isCaptain   Boolean  @default(false)
  isPresident Boolean  @default(false)
  imageUrl    String?
  linkedinUrl String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Squad {
  mechanical
  avionics
  software
}

enum LinkType {
  WEB
  INSTAGRAM
  YOUTUBE
  X
  LINKEDIN
  NEWS
}

model HomeCard {
  id          String         @id @default(cuid())
  title       String         @db.VarChar(120)
  content     String         @db.VarChar(500)
  imageUrl    String
  order       Int            @default(0)
  isActive    Boolean        @default(true)
  links       HomeCardLink[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([isActive, order])
}

model HomeCardLink {
  id        String   @id @default(cuid())
  cardId    String
  type      LinkType
  url       String

  card      HomeCard @relation(fields: [cardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Aynı kartta aynı tür bir kez
  @@unique([cardId, type])
  @@index([type])
}
